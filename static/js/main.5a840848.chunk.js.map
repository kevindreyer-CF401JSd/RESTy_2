{"version":3,"sources":["24278.svg","components/About/index.js","components/Contact/index.js","components/Header/header.js","components/Navbar/navbar.js","components/History/index.js","components/Interface/interface.js","App.js","components/Router/index.js","serviceWorker.js","index.js"],"names":["module","exports","About","className","href","target","Contact","Header","Navbar","to","History","content","console","log","map","call","Interface","length","App","props","handleError","err","error","Response","JSON","stringify","code","ok","message","url","state","apiurl","handleLoading","stat","setState","results","loading","makeAPICall","a","fetch","method","restMethod","catch","response","status","toString","handleHistoryChange","json","data","handleChange","e","value","changeColor","val","selectGET","selectPOST","selectPUT","selectDELETE","bind","h","get_class","this","post_class","put_class","delete_class","loadid","onChange","type","name","placeholder","id","onClick","src","logo","alt","React","Component","Router","handleAppHistory","history","push","path","onHistoryChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5a840848.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/24278.49a6d506.svg\";","import React from 'react'\n\nconst About = () => {\n  return (\n    <div className=\"about\">\n      <p>hello, world, this is my RESTy app. here is some info about it.</p>\n      <p> \n        RESTy is a simple clone of the Postman app (<a href=\"https://www.postman.com/\" target=\"_blank\">postman.com</a>).\n        It uses the React.js and the Browser fetch method to make API calls.\n      </p>\n    </div>\n  )\n}\n\nexport default About","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <div className=\"Contact\">\n      <p>To contact me use one of the below</p>\n      <ul>\n        <li><a href=\"mailto:kdreyerinseattle@gmail.com?Subject=Regarding%20RESTy\" target=\"_blank\">Email</a></li>\n        <li><a href=\"https://github.com/astrokd\" target=\"_blank\">Github</a></li>\n        <li><a href=\"https://www.linkedin.com/in/kevinjdreyer/\" target=\"_blank\">Linkedin</a></li>\n      </ul>\n    </div>\n  )\n}\n\nexport default Contact","import React from 'react'\n\nconst Header = () => {\n  return (\n    <header className=\"App-header\">\n      <h1>\n        RESTy\n      </h1>\n    </header>\n  )\n}\n\nexport default Header","import React from 'react'\nimport './navbar.css'\nimport { Link } from 'react-router-dom'\n\nconst Navbar = () => {\n  return (\n    <nav className=\"Navbar\">\n      <ul>\n        <li className=\"nav\"><Link to=\"/\">Home</Link></li>\n        <li className=\"nav\"><Link to=\"/about\">About</Link></li>\n        <li className=\"nav\"><Link to=\"/contact\">Contact</Link></li>\n        <li className=\"nav\"><Link to=\"/history\">History</Link></li>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Navbar","import React from 'react'\n// import App from '../../App'\n\nconst History = ({content}) => {\n  console.log('----content history----',content)\n  return (\n    <div className=\"History\">\n      <p>This is the history of REST calls made with RESTy</p>\n      <ul>\n      {content.map(call => {\n        return (\n          <li>\n            { call }\n          </li>\n        )\n      })}\n    </ul>\n    </div>\n  )\n}\n\nexport default History","import React from 'react'\n\nconst Interface = ({ content }) => {\n  return (\n    <div className=\"Interface\">\n      <article className=\"results\">results: \n        <div>\n          {content.length\n            ? content\n            : 'null'\n          }\n        </div>\n      </article>\n    </div>\n  )\n}\n\nexport default Interface","import React from 'react';\nimport './App.css';\nimport logo from './24278.svg';\n\nimport Interface from './components/Interface/interface'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      apiurl: '',\n      restMethod: 'GET',\n      results: '',\n      selectGET: false,\n      selectPOST: true,\n      selectPUT: true,\n      selectDELETE: true,\n      loading: false,\n      // history: this.props.history,\n    };\n    this.handleHistoryChange = this.handleHistoryChange.bind(this)\n  }\n\n  handleHistoryChange(h) {\n    console.log('this.props-------',h)\n    // this.props.onHistoryChange(h)\n  }\n\n  handleError = err => {\n    console.error('handleError',err)\n    return new Response(JSON.stringify({\n      code: 400,\n      ok: false,\n      message: 'Something went wrong',\n      url: this.state.apiurl\n    }))\n  }\n\n  handleLoading = stat => {\n    this.setState({\n      results: `RESTy is waiting for response from REST api: ${this.state.apiurl}`,\n      loading: stat,\n    })\n  }\n\n  makeAPICall = async () => {\n    console.log('-- apiurl',this.state.apiurl);\n      this.handleLoading(true)\n      const response = await (fetch(this.state.apiurl, {method: this.state.restMethod})\n        .catch(this.handleError));\n      // console.log('---- response',response);\n      this.handleLoading(false)\n      if (!response.ok) {\n        this.setState({\n          results: `Error: ${response.status.toString()}`,\n        })\n      } else {\n        // console.log('-- in makeAPicall ----',this.state.apiurl);\n        this.handleHistoryChange(this.state.apiurl);\n        // this.props.onHistoryChange(this.state.apiurl);\n        const data = await response.json();\n        this.setState({\n          results: JSON.stringify(data),\n        })\n      }\n  }\n\n  handleChange = e => {\n    this.setState({\n      apiurl: e.target.value\n    });\n  }\n\n  changeColor = (val) => {\n    this.setState({restMethod: val})\n    if (val === 'GET') {\n      this.setState({selectGET: !this.state.selectGET})\n      if (!this.state.selectPOST) this.setState({selectPOST: !this.state.selectPOST})\n      if (!this.state.selectPUT) this.setState({selectPUT: !this.state.selectPUT})\n      if (!this.state.selectDELETE) this.setState({selectDELETE: !this.state.selectDELETE})\n    } \n    if (val === 'POST') {\n      if (!this.state.selectGET) this.setState({selectGET: !this.state.selectGET})\n      this.setState({selectPOST: !this.state.selectPOST})\n      if (!this.state.selectPUT) this.setState({selectPUT: !this.state.selectPUT})\n      if (!this.state.selectDELETE) this.setState({selectDELETE: !this.state.selectDELETE})\n    }\n    if (val === 'PUT') {\n      if (!this.state.selectGET) this.setState({selectGET: !this.state.selectGET})\n      if (!this.state.selectPOST) this.setState({selectPOST: !this.state.selectPOST})\n      this.setState({selectPUT: !this.state.selectPUT})\n      if (!this.state.selectDELETE) this.setState({selectDELETE: !this.state.selectDELETE})\n    }\n    if (val === 'DELETE') {\n      if (!this.state.selectGET) this.setState({selectGET: !this.state.selectGET})\n      if (!this.state.selectPOST) this.setState({selectPOST: !this.state.selectPOST})\n      if (!this.state.selectPUT) this.setState({selectPUT: !this.state.selectPUT})\n      this.setState({selectDELETE: !this.state.selectDELETE})\n    }\n  }\n\n  render () {\n    let get_class = this.state.selectGET ? \"RESTunselected\" : \"RESTselected\"\n    let post_class = this.state.selectPOST ? \"RESTunselected\" : \"RESTselected\"\n    let put_class = this.state.selectPUT ? \"RESTunselected\" : \"RESTselected\"\n    let delete_class = this.state.selectDELETE ? \"RESTunselected\" : \"RESTselected\"\n    let loadid = this.state.loading ? \"loading\" : \"notloading\"\n    return (\n      <div className=\"App\">\n        <form className=\"URLform\">\n          <input onChange={this.handleChange} type=\"text\" name=\"urlpath\" placeholder='Place URL here'></input>\n        </form>\n        <div className=\"buttons\">\n          <div className=\"RESTmethods\">\n            <button className=\"method\" id={get_class} onClick={() => this.changeColor('GET')}>GET</button>\n            <button className=\"method\" id={post_class} onClick={() => this.changeColor('POST')}>POST</button>\n            <button className=\"method\" id={put_class} onClick={() => this.changeColor('PUT')}>PUT</button>\n            <button className=\"method\" id={delete_class} onClick={() => this.changeColor('DELETE')}>DELETE</button>\n            <div>\n              <button className=\"run\" onClick={this.makeAPICall}>RUN</button>\n            </div>\n          </div>\n        </div>\n        <img src={logo} className=\"App-logo\" id={loadid} alt=\"logo\" />\n        <Interface content={this.state.results} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react'\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\nimport About from '../About'\nimport Contact from '../Contact'\nimport Header from '../Header/header'\nimport Navbar from '../Navbar/navbar'\nimport History from '../History'\nimport App from '../../App'\n\nclass Router extends React.Component {\n  constructor(props) {\n    super(props)\n    this.handleAppHistory = this.handleAppHistory.bind(this);\n    this.state = { history: ['https://pokeapi.co/api/v2/pokemon/'] };\n  }\n\n  handleAppHistory(h) {\n    this.setState({ history: this.state.history.push(h) });\n  }\n\n  render () {\n    const history = this.state.history\n    return (\n      <BrowserRouter>\n        <Header />\n        <Navbar />\n        <Switch>\n          <Route path=\"/history\">\n            <History content={history}/>\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/contact\">\n            <Contact />\n          </Route>\n          <Route path=\"/\">\n            <App \n              content={history}\n              onHistoryChange={this.handleAppHistory} \n            />\n          </Route>\n        </Switch>\n        <footer>\n          Codefellows JS 401d34 Lab 29 Kevin Dreyer\n        </footer>\n      </BrowserRouter>\n    )\n  }\n}\n\n\nexport default Router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}